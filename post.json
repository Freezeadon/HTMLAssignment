[
  {
    "title": "Implementing a Light/Dark Mode Switcher",
    "date": "2024-07-31",
    "content": "In this post, I'll walk you through the process of implementing a light/dark mode switcher for my portfolio website. The objective was to allow users to switch between light and dark themes using a button.\n\nSteps to Implement the Light/Dark Mode Switcher\n\n1. HTML:\n   - I added a button in a common location on all pages. This button serves as the toggle for switching themes.\n\n2. CSS:\n   - I created two sets of CSS rules, one for the light theme and one for the dark theme. Each set defines colors, backgrounds, and other style properties. The light theme is the default, and the dark theme is applied by adding a `dark-mode` class to the body element.\n\n3. JavaScript:\n   - I wrote a script that adds an event listener to the button. When clicked, it toggles a class on the `body` element, switching between light and dark themes. The button's text and icon also update to reflect the current theme. Here is the JavaScript code:\n\njavascript\nconst modeSwitch = document.getElementById('mode-switch');\nconst currentMode = localStorage.getItem('mode') || 'light-mode';\n\nif (currentMode === 'dark-mode') {\n  document.body.classList.add('dark-mode');\n  modeSwitch.innerHTML = '<i class=\"bi bi-sun\"></i> <span class=\"d-none d-sm-inline\">Light Mode</span>';\n}\n\nmodeSwitch.addEventListener('click', () => {\n  document.body.classList.toggle('dark-mode');\n  const isDarkMode = document.body.classList.contains('dark-mode');\n  localStorage.setItem('mode', isDarkMode ? 'dark-mode' : 'light-mode');\n  modeSwitch.innerHTML = isDarkMode ? '<i class=\"bi bi-sun\"></i> <span class=\"d-none d-sm-inline\">Light Mode</span>'\n    : '<i class=\"bi bi-moon\"></i> <span class=\"d-none d-sm-inline\">Dark Mode</span>';\n});\n\n4. Persisting the Theme:\n   - I used localStorage to remember the user's theme preference across page reloads and sessions. This ensures that the selected theme remains active even after the user navigates away from the page or refreshes the browser.\n\nWith this implementation, users can enjoy a personalized viewing experience on my portfolio site."
  },
  {
    "title": "Creating a Dynamic Blog Section",
    "date": "2024-08-01",
    "content": "This post details the process of implementing a dynamic blog section that loads posts from a JSON file. This approach makes it easy to update and manage blog content without modifying the HTML structure.\n\nStep 1: Preparing the JSON File\nI started by creating a `posts.json` file that contains an array of blog post objects. Each object includes the title, date, and content of a post.\n\nStep 2: Fetching and Displaying Posts\nNext, I wrote a JavaScript function to fetch the blog posts from the JSON file and dynamically generate HTML to display them on the page. I used the Fetch API to retrieve the JSON data and then iterated over the array to create blog post elements.\n\njavascript\nfetch('posts.json')\n  .then(response => response.json())\n  .then(posts => {\n    const blogContainer = document.getElementById('blog-list');\n    posts.forEach(post => {\n      const postElement = document.createElement('div');\n      postElement.classList.add('col-md-6');\n      postElement.innerHTML = `\n        <div class=\"card mb-4\">\n          <div class=\"card-body\">\n            <h2 class=\"card-title\">${post.title}</h2>\n            <p class=\"card-text\">${post.content}</p>\n            <p class=\"text-muted\">${post.date}</p>\n          </div>\n        </div>\n      `;\n      blogContainer.appendChild(postElement);\n    });\n  });\n```\n\nStep 3: Styling the Blog Section\nFinally, I added some CSS to style the blog section, ensuring that each post is visually appealing and consistent with the rest of the website's design.\n\ncss\n.blog-post {\n  margin-bottom: 20px;\n  padding: 20px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n}\n.blog-post h2 {\n  margin-top: 0;\n}\n\nBy following these steps, I created a dynamic blog section that loads posts from a JSON file, making it easy to manage content updates."
  }

]


